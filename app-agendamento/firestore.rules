rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // FUNÇÕES AUXILIARES
    // =================================
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Otimizado para usar Custom Claims. É mais rápido e não custa uma leitura.
    function isOwner() {
      return request.auth.token.role == 'owner';
    }
    
    function isProfessional() {
      return request.auth.token.role == 'professional';
    }

    // =================================
    // REGRAS PARA A COLEÇÃO 'users'
    // =================================
    match /users/{userId} {
      // Permite que utilizadores autenticados leiam dados uns dos outros (necessário para o owner ver o nome do cliente).
      allow read: if isSignedIn();

      // Apenas o próprio utilizador pode criar ou atualizar o seu perfil.
      allow update, create: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;

      // Regras para subcoleções (como 'favorites').
      match /{subcollection}/{docId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // =================================
    // REGRA PARA COLLECTION GROUP (Sua regra original, mantida)
    // =================================
    match /{path=**}/appointments/{appointmentId} {
        allow read: if isSignedIn() && (
            request.auth.uid == resource.data.clientId ||
            request.auth.uid == resource.data.professionalAuthUid
        );
    }

    // =================================
    // REGRAS PARA A COLEÇÃO 'establishments' E SUAS SUBCOLEÇÕES (COM A CORREÇÃO)
    // =================================
    match /establishments/{estId} {
  	// Permite que qualquer pessoa leia os dados públicos do estabelecimento.
  		allow read: if true;

  	// --- MUDANÇA PRINCIPAL AQUI ---

  	// REGRA DE CRIAÇÃO:
  	// Permite a criação se o utilizador estiver logado, o ID for o dele,
  	// E o seu documento correspondente na coleção 'users' tiver o cargo 'owner'.
  		allow create: if isSignedIn()
                  && request.auth.uid == estId
                  && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';

  		// REGRA DE ATUALIZAÇÃO E EXCLUSÃO:
  		// Permite futuras alterações apenas se o utilizador já for um 'owner' (verificado pelo token).
  		allow update, delete: if isSignedIn()
                          && isOwner()
                          && request.auth.uid == estId;
      
      // A permissão de escrita continua segura, apenas para o owner.
      allow write: if isSignedIn() && isOwner() && request.auth.uid == estId;

      // --- SUBCOLEÇÕES (Serviços, Profissionais) ---
      match /services/{serviceId} {
        // MUDANÇA: Permite que todos leiam a lista de serviços.
        allow read: if true;
        allow write: if isSignedIn() && isOwner() && request.auth.uid == estId;
      }

      match /professionals/{professionalId} {
        // MUDANÇA: Permite que todos leiam a lista de profissionais.
        allow read: if true;
        allow write: if isSignedIn() && isOwner() && request.auth.uid == estId;
      }

      // --- SUBCOLEÇÃO DE AGENDAMENTOS (Suas regras específicas e seguras, mantidas) ---
      match /appointments/{appointmentId} {
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.clientId;
        
        allow read: if isSignedIn() && (
          (isOwner() && request.auth.uid == estId) ||
          (request.auth.uid == resource.data.clientId) ||
          (isProfessional() && request.auth.uid == resource.data.professionalAuthUid)
        );

        // Adicionada permissão de update para o owner também (para cancelar)
        allow update: if isSignedIn() && (
          request.auth.uid == resource.data.clientId ||
          (isOwner() && request.auth.uid == estId)
        );
        allow delete: if false;
      }
    }
  }
}